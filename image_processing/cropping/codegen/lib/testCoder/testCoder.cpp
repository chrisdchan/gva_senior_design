//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// testCoder.cpp
//
// Code generation for function 'testCoder'
//

// Include files
#include "testCoder.h"
#include "string1.h"
#include "coder_array.h"
#include "libmwimfilter.h"
#include "libmwippfilter.h"
#include "libmwjpegreader.h"
#include "libmwrgb2gray_tbb.h"

int main()
{
  std::cout << "Hello World!" << std::endl;
  return 0;
}

// Function Definitions
void testCoder(const coder::rtString *inputImage,
               coder::array<unsigned char, 2U> &newImg)
{
  static const double kernel[169]{
      0.00034388074002273089, 0.00063359251209252722, 0.0010446174516432778,
      0.0015411665540596389,  0.0020346369704453988,  0.0024036395714370842,
      0.0025409540793697454,  0.0024036395714370842,  0.0020346369704453988,
      0.0015411665540596389,  0.0010446174516432778,  0.00063359251209252722,
      0.00034388074002273089, 0.00063359251209252722, 0.0011673799217518947,
      0.0019246841079806,     0.0028395646364931175,  0.0037487727553907673,
      0.0044286517300479228,  0.00468165061571408,    0.0044286517300479228,
      0.0037487727553907673,  0.0028395646364931175,  0.0019246841079806,
      0.0011673799217518947,  0.00063359251209252722, 0.0010446174516432778,
      0.0019246841079806,     0.0031732676282061173,  0.00468165061571408,
      0.0061806813808338865,  0.0073016123078529322,  0.0077187369521141552,
      0.0073016123078529322,  0.0061806813808338865,  0.00468165061571408,
      0.0031732676282061173,  0.0019246841079806,     0.0010446174516432778,
      0.0015411665540596389,  0.0028395646364931175,  0.00468165061571408,
      0.0069070293008996614,  0.009118610272550896,   0.010772365196341647,
      0.011387766125742308,   0.010772365196341647,   0.009118610272550896,
      0.0069070293008996614,  0.00468165061571408,    0.0028395646364931175,
      0.0015411665540596389,  0.0020346369704453988,  0.0037487727553907673,
      0.0061806813808338865,  0.009118610272550896,   0.012038323522362981,
      0.01422159884658895,    0.015034046715579355,   0.01422159884658895,
      0.012038323522362981,   0.009118610272550896,   0.0061806813808338865,
      0.0037487727553907673,  0.0020346369704453988,  0.0024036395714370842,
      0.0044286517300479228,  0.0073016123078529322,  0.010772365196341647,
      0.01422159884658895,    0.016800833885015916,   0.017760627634958236,
      0.016800833885015916,   0.01422159884658895,    0.010772365196341647,
      0.0073016123078529322,  0.0044286517300479228,  0.0024036395714370842,
      0.0025409540793697454,  0.00468165061571408,    0.0077187369521141552,
      0.011387766125742308,   0.015034046715579355,   0.017760627634958236,
      0.018775252237269731,   0.017760627634958236,   0.015034046715579355,
      0.011387766125742308,   0.0077187369521141552,  0.00468165061571408,
      0.0025409540793697454,  0.0024036395714370842,  0.0044286517300479228,
      0.0073016123078529322,  0.010772365196341647,   0.01422159884658895,
      0.016800833885015916,   0.017760627634958236,   0.016800833885015916,
      0.01422159884658895,    0.010772365196341647,   0.0073016123078529322,
      0.0044286517300479228,  0.0024036395714370842,  0.0020346369704453988,
      0.0037487727553907673,  0.0061806813808338865,  0.009118610272550896,
      0.012038323522362981,   0.01422159884658895,    0.015034046715579355,
      0.01422159884658895,    0.012038323522362981,   0.009118610272550896,
      0.0061806813808338865,  0.0037487727553907673,  0.0020346369704453988,
      0.0015411665540596389,  0.0028395646364931175,  0.00468165061571408,
      0.0069070293008996614,  0.009118610272550896,   0.010772365196341647,
      0.011387766125742308,   0.010772365196341647,   0.009118610272550896,
      0.0069070293008996614,  0.00468165061571408,    0.0028395646364931175,
      0.0015411665540596389,  0.0010446174516432778,  0.0019246841079806,
      0.0031732676282061173,  0.00468165061571408,    0.0061806813808338865,
      0.0073016123078529322,  0.0077187369521141552,  0.0073016123078529322,
      0.0061806813808338865,  0.00468165061571408,    0.0031732676282061173,
      0.0019246841079806,     0.0010446174516432778,  0.00063359251209252722,
      0.0011673799217518947,  0.0019246841079806,     0.0028395646364931175,
      0.0037487727553907673,  0.0044286517300479228,  0.00468165061571408,
      0.0044286517300479228,  0.0037487727553907673,  0.0028395646364931175,
      0.0019246841079806,     0.0011673799217518947,  0.00063359251209252722,
      0.00034388074002273089, 0.00063359251209252722, 0.0010446174516432778,
      0.0015411665540596389,  0.0020346369704453988,  0.0024036395714370842,
      0.0025409540793697454,  0.0024036395714370842,  0.0020346369704453988,
      0.0015411665540596389,  0.0010446174516432778,  0.00063359251209252722,
      0.00034388074002273089};
  static const double nonZeroKernel[169]{
      0.00034388074002273089, 0.00063359251209252722, 0.0010446174516432778,
      0.0015411665540596389,  0.0020346369704453988,  0.0024036395714370842,
      0.0025409540793697454,  0.0024036395714370842,  0.0020346369704453988,
      0.0015411665540596389,  0.0010446174516432778,  0.00063359251209252722,
      0.00034388074002273089, 0.00063359251209252722, 0.0011673799217518947,
      0.0019246841079806,     0.0028395646364931175,  0.0037487727553907673,
      0.0044286517300479228,  0.00468165061571408,    0.0044286517300479228,
      0.0037487727553907673,  0.0028395646364931175,  0.0019246841079806,
      0.0011673799217518947,  0.00063359251209252722, 0.0010446174516432778,
      0.0019246841079806,     0.0031732676282061173,  0.00468165061571408,
      0.0061806813808338865,  0.0073016123078529322,  0.0077187369521141552,
      0.0073016123078529322,  0.0061806813808338865,  0.00468165061571408,
      0.0031732676282061173,  0.0019246841079806,     0.0010446174516432778,
      0.0015411665540596389,  0.0028395646364931175,  0.00468165061571408,
      0.0069070293008996614,  0.009118610272550896,   0.010772365196341647,
      0.011387766125742308,   0.010772365196341647,   0.009118610272550896,
      0.0069070293008996614,  0.00468165061571408,    0.0028395646364931175,
      0.0015411665540596389,  0.0020346369704453988,  0.0037487727553907673,
      0.0061806813808338865,  0.009118610272550896,   0.012038323522362981,
      0.01422159884658895,    0.015034046715579355,   0.01422159884658895,
      0.012038323522362981,   0.009118610272550896,   0.0061806813808338865,
      0.0037487727553907673,  0.0020346369704453988,  0.0024036395714370842,
      0.0044286517300479228,  0.0073016123078529322,  0.010772365196341647,
      0.01422159884658895,    0.016800833885015916,   0.017760627634958236,
      0.016800833885015916,   0.01422159884658895,    0.010772365196341647,
      0.0073016123078529322,  0.0044286517300479228,  0.0024036395714370842,
      0.0025409540793697454,  0.00468165061571408,    0.0077187369521141552,
      0.011387766125742308,   0.015034046715579355,   0.017760627634958236,
      0.018775252237269731,   0.017760627634958236,   0.015034046715579355,
      0.011387766125742308,   0.0077187369521141552,  0.00468165061571408,
      0.0025409540793697454,  0.0024036395714370842,  0.0044286517300479228,
      0.0073016123078529322,  0.010772365196341647,   0.01422159884658895,
      0.016800833885015916,   0.017760627634958236,   0.016800833885015916,
      0.01422159884658895,    0.010772365196341647,   0.0073016123078529322,
      0.0044286517300479228,  0.0024036395714370842,  0.0020346369704453988,
      0.0037487727553907673,  0.0061806813808338865,  0.009118610272550896,
      0.012038323522362981,   0.01422159884658895,    0.015034046715579355,
      0.01422159884658895,    0.012038323522362981,   0.009118610272550896,
      0.0061806813808338865,  0.0037487727553907673,  0.0020346369704453988,
      0.0015411665540596389,  0.0028395646364931175,  0.00468165061571408,
      0.0069070293008996614,  0.009118610272550896,   0.010772365196341647,
      0.011387766125742308,   0.010772365196341647,   0.009118610272550896,
      0.0069070293008996614,  0.00468165061571408,    0.0028395646364931175,
      0.0015411665540596389,  0.0010446174516432778,  0.0019246841079806,
      0.0031732676282061173,  0.00468165061571408,    0.0061806813808338865,
      0.0073016123078529322,  0.0077187369521141552,  0.0073016123078529322,
      0.0061806813808338865,  0.00468165061571408,    0.0031732676282061173,
      0.0019246841079806,     0.0010446174516432778,  0.00063359251209252722,
      0.0011673799217518947,  0.0019246841079806,     0.0028395646364931175,
      0.0037487727553907673,  0.0044286517300479228,  0.00468165061571408,
      0.0044286517300479228,  0.0037487727553907673,  0.0028395646364931175,
      0.0019246841079806,     0.0011673799217518947,  0.00063359251209252722,
      0.00034388074002273089, 0.00063359251209252722, 0.0010446174516432778,
      0.0015411665540596389,  0.0020346369704453988,  0.0024036395714370842,
      0.0025409540793697454,  0.0024036395714370842,  0.0020346369704453988,
      0.0015411665540596389,  0.0010446174516432778,  0.00063359251209252722,
      0.00034388074002273089};
  coder::array<int, 2U> idxA;
  coder::array<unsigned int, 2U> idxDir;
  coder::array<unsigned int, 2U> y;
  coder::array<unsigned char, 3U> out;
  coder::array<unsigned char, 2U> a;
  coder::array<char, 2U> fname_tmp;
  double outDimsInit[3];
  double outDims_data[3];
  double outSizeT[2];
  double padSize[2];
  double libjpegMsgCode;
  int i;
  int outNumDims;
  char libjpegWarnBuffer[200];
  signed char colorSpaceStatus;
  signed char errWarnType;
  signed char fileStatus;
  signed char libjpegReadDone;
  fname_tmp.set_size(1, inputImage->Value.size(1) + 1);
  outNumDims = inputImage->Value.size(1);
  for (i = 0; i < outNumDims; i++) {
    fname_tmp[i] = inputImage->Value[i];
  }
  fname_tmp[inputImage->Value.size(1)] = '\x00';
  for (i = 0; i < 200; i++) {
    libjpegWarnBuffer[i] = ' ';
  }
  jpegreader_getimagesize(&fname_tmp[0], &outDimsInit[0], &fileStatus,
                          &colorSpaceStatus, &libjpegMsgCode,
                          &libjpegWarnBuffer[0], &errWarnType);
  if (outDimsInit[2] == 3.0) {
    outDims_data[0] = outDimsInit[0];
    outDims_data[1] = outDimsInit[1];
    outDims_data[2] = 3.0;
    outNumDims = 3;
  } else {
    outDims_data[0] = outDimsInit[0];
    outDims_data[1] = outDimsInit[1];
    outNumDims = 2;
  }
  if ((fileStatus == -1) || (colorSpaceStatus == -2) ||
      (colorSpaceStatus == -1) || (errWarnType == -1)) {
    if (outNumDims == 3) {
      out.set_size(0, 0, 0);
    } else {
      out.set_size(0, 0, 1);
    }
  } else {
    if (outNumDims == 3) {
      out.set_size(static_cast<int>(outDims_data[0]),
                   static_cast<int>(outDims_data[1]), 3);
    } else {
      out.set_size(static_cast<int>(outDims_data[0]),
                   static_cast<int>(outDims_data[1]), 1);
    }
    jpegreader_uint8(&fname_tmp[0], &out[0], &outDims_data[0],
                     static_cast<double>(outNumDims), &fileStatus,
                     &libjpegReadDone, &libjpegMsgCode, &libjpegWarnBuffer[0],
                     &errWarnType);
    if ((fileStatus == -1) || (libjpegReadDone == 0) || (errWarnType == -1)) {
      if (outNumDims == 3) {
        out.set_size(0, 0, 0);
      } else {
        out.set_size(0, 0, 1);
      }
    }
  }
  newImg.set_size(out.size(0), out.size(1));
  rgb2gray_tbb_uint8(&out[0],
                     static_cast<double>(out.size(0)) *
                         static_cast<double>(out.size(1)),
                     &newImg[0], true);
  outSizeT[0] = newImg.size(0);
  padSize[0] = 6.0;
  outSizeT[1] = newImg.size(1);
  padSize[1] = 6.0;
  if ((newImg.size(0) != 0) && (newImg.size(1) != 0)) {
    double sizeOutput[2];
    unsigned int u;
    boolean_T tooBig;
    sizeOutput[0] = newImg.size(0);
    sizeOutput[1] = newImg.size(1);
    if (newImg.size(0) + 12U < newImg.size(1) + 12U) {
      u = newImg.size(1) + 12U;
    } else {
      u = newImg.size(0) + 12U;
    }
    idxA.set_size(static_cast<int>(u), 2);
    i = newImg.size(0);
    y.set_size(1, i);
    outNumDims = i - 1;
    for (i = 0; i <= outNumDims; i++) {
      y[i] = i + 1U;
    }
    idxDir.set_size(1, y.size(1) + 12);
    for (i = 0; i < 6; i++) {
      idxDir[i] = 1U;
    }
    outNumDims = y.size(1);
    for (i = 0; i < outNumDims; i++) {
      idxDir[i + 6] = y[i];
    }
    for (i = 0; i < 6; i++) {
      idxDir[(i + y.size(1)) + 6] = static_cast<unsigned int>(sizeOutput[0]);
    }
    outNumDims = idxDir.size(1);
    for (i = 0; i < outNumDims; i++) {
      idxA[i] = static_cast<int>(idxDir[i]);
    }
    i = newImg.size(1);
    y.set_size(1, i);
    outNumDims = i - 1;
    for (i = 0; i <= outNumDims; i++) {
      y[i] = i + 1U;
    }
    idxDir.set_size(1, y.size(1) + 12);
    for (i = 0; i < 6; i++) {
      idxDir[i] = 1U;
    }
    outNumDims = y.size(1);
    for (i = 0; i < outNumDims; i++) {
      idxDir[i + 6] = y[i];
    }
    for (i = 0; i < 6; i++) {
      idxDir[(i + y.size(1)) + 6] = static_cast<unsigned int>(sizeOutput[1]);
    }
    outNumDims = idxDir.size(1);
    for (i = 0; i < outNumDims; i++) {
      idxA[i + idxA.size(0)] = static_cast<int>(idxDir[i]);
    }
    i = newImg.size(1) + 12;
    a.set_size(newImg.size(0) + 12, newImg.size(1) + 12);
    for (int j{0}; j < i; j++) {
      outNumDims = a.size(0);
      for (int b_i{0}; b_i < outNumDims; b_i++) {
        a[b_i + a.size(0) * j] =
            newImg[(idxA[b_i] + newImg.size(0) * (idxA[j + idxA.size(0)] - 1)) -
                   1];
      }
    }
    tooBig = true;
    if ((newImg.size(0) <= 65500) || (newImg.size(1) <= 65500)) {
      tooBig = false;
    }
    newImg.set_size(static_cast<int>(outSizeT[0]),
                    static_cast<int>(outSizeT[1]));
    if (!tooBig) {
      double padSizeT[2];
      padSizeT[0] = a.size(0);
      sizeOutput[0] = 13.0;
      padSizeT[1] = a.size(1);
      sizeOutput[1] = 13.0;
      ippfilter_uint8(&a[0], &newImg[0], &outSizeT[0], 2.0, &padSizeT[0],
                      &kernel[0], &sizeOutput[0], false);
    } else {
      double padSizeT[2];
      boolean_T conn[169];
      padSizeT[0] = a.size(0);
      padSizeT[1] = a.size(1);
      for (i = 0; i < 169; i++) {
        conn[i] = true;
      }
      sizeOutput[0] = 13.0;
      sizeOutput[1] = 13.0;
      imfilter_uint8(&a[0], &newImg[0], 2.0, &outSizeT[0], 2.0, &padSizeT[0],
                     &nonZeroKernel[0], 169.0, &conn[0], 2.0, &sizeOutput[0],
                     &padSize[0], 2.0, true, false);
    }
  }
}

// End of code generation (testCoder.cpp)
